// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Protocol.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProcessesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessesMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessesMessage_ProcessMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessesMessage_ProcessMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Protocol_2eproto() {
  protobuf_AddDesc_Protocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Protocol.proto");
  GOOGLE_CHECK(file != NULL);
  ProcessesMessage_descriptor_ = file->message_type(0);
  static const int ProcessesMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage, processmessage_),
  };
  ProcessesMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessesMessage_descriptor_,
      ProcessesMessage::default_instance_,
      ProcessesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessesMessage));
  ProcessesMessage_ProcessMessage_descriptor_ = ProcessesMessage_descriptor_->nested_type(0);
  static const int ProcessesMessage_ProcessMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage_ProcessMessage, processname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage_ProcessMessage, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage_ProcessMessage, usercpuload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage_ProcessMessage, systemcpuload_),
  };
  ProcessesMessage_ProcessMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessesMessage_ProcessMessage_descriptor_,
      ProcessesMessage_ProcessMessage::default_instance_,
      ProcessesMessage_ProcessMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage_ProcessMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessesMessage_ProcessMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessesMessage_ProcessMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Protocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessesMessage_descriptor_, &ProcessesMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessesMessage_ProcessMessage_descriptor_, &ProcessesMessage_ProcessMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Protocol_2eproto() {
  delete ProcessesMessage::default_instance_;
  delete ProcessesMessage_reflection_;
  delete ProcessesMessage_ProcessMessage::default_instance_;
  delete ProcessesMessage_ProcessMessage_reflection_;
}

void protobuf_AddDesc_Protocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Protocol.proto\"\322\001\n\020ProcessesMessage\022\020\n"
    "\010hostname\030\001 \002(\t\022\022\n\nupdatetime\030\002 \002(\001\0228\n\016p"
    "rocessmessage\030\003 \003(\0132 .ProcessesMessage.P"
    "rocessMessage\032^\n\016ProcessMessage\022\023\n\013proce"
    "ssname\030\001 \002(\t\022\013\n\003pid\030\002 \002(\r\022\023\n\013userCpuLoad"
    "\030\003 \002(\001\022\025\n\rsystemCpuLoad\030\004 \002(\001", 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Protocol.proto", &protobuf_RegisterTypes);
  ProcessesMessage::default_instance_ = new ProcessesMessage();
  ProcessesMessage_ProcessMessage::default_instance_ = new ProcessesMessage_ProcessMessage();
  ProcessesMessage::default_instance_->InitAsDefaultInstance();
  ProcessesMessage_ProcessMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Protocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Protocol_2eproto {
  StaticDescriptorInitializer_Protocol_2eproto() {
    protobuf_AddDesc_Protocol_2eproto();
  }
} static_descriptor_initializer_Protocol_2eproto_;


// ===================================================================

const ::std::string ProcessesMessage_ProcessMessage::_default_processname_;
#ifndef _MSC_VER
const int ProcessesMessage_ProcessMessage::kProcessnameFieldNumber;
const int ProcessesMessage_ProcessMessage::kPidFieldNumber;
const int ProcessesMessage_ProcessMessage::kUserCpuLoadFieldNumber;
const int ProcessesMessage_ProcessMessage::kSystemCpuLoadFieldNumber;
#endif  // !_MSC_VER

ProcessesMessage_ProcessMessage::ProcessesMessage_ProcessMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessesMessage_ProcessMessage::InitAsDefaultInstance() {
}

ProcessesMessage_ProcessMessage::ProcessesMessage_ProcessMessage(const ProcessesMessage_ProcessMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessesMessage_ProcessMessage::SharedCtor() {
  _cached_size_ = 0;
  processname_ = const_cast< ::std::string*>(&_default_processname_);
  pid_ = 0u;
  usercpuload_ = 0;
  systemcpuload_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessesMessage_ProcessMessage::~ProcessesMessage_ProcessMessage() {
  SharedDtor();
}

void ProcessesMessage_ProcessMessage::SharedDtor() {
  if (processname_ != &_default_processname_) {
    delete processname_;
  }
  if (this != default_instance_) {
  }
}

void ProcessesMessage_ProcessMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessesMessage_ProcessMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessesMessage_ProcessMessage_descriptor_;
}

const ProcessesMessage_ProcessMessage& ProcessesMessage_ProcessMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();  return *default_instance_;
}

ProcessesMessage_ProcessMessage* ProcessesMessage_ProcessMessage::default_instance_ = NULL;

ProcessesMessage_ProcessMessage* ProcessesMessage_ProcessMessage::New() const {
  return new ProcessesMessage_ProcessMessage;
}

void ProcessesMessage_ProcessMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (processname_ != &_default_processname_) {
        processname_->clear();
      }
    }
    pid_ = 0u;
    usercpuload_ = 0;
    systemcpuload_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessesMessage_ProcessMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string processname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->processname().data(), this->processname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }
      
      // required uint32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_userCpuLoad;
        break;
      }
      
      // required double userCpuLoad = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_userCpuLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usercpuload_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_systemCpuLoad;
        break;
      }
      
      // required double systemCpuLoad = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_systemCpuLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &systemcpuload_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessesMessage_ProcessMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string processname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->processname(), output);
  }
  
  // required uint32 pid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pid(), output);
  }
  
  // required double userCpuLoad = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->usercpuload(), output);
  }
  
  // required double systemCpuLoad = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->systemcpuload(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessesMessage_ProcessMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string processname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->processname().data(), this->processname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->processname(), target);
  }
  
  // required uint32 pid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pid(), target);
  }
  
  // required double userCpuLoad = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->usercpuload(), target);
  }
  
  // required double systemCpuLoad = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->systemcpuload(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessesMessage_ProcessMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string processname = 1;
    if (has_processname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processname());
    }
    
    // required uint32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pid());
    }
    
    // required double userCpuLoad = 3;
    if (has_usercpuload()) {
      total_size += 1 + 8;
    }
    
    // required double systemCpuLoad = 4;
    if (has_systemcpuload()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessesMessage_ProcessMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessesMessage_ProcessMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessesMessage_ProcessMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessesMessage_ProcessMessage::MergeFrom(const ProcessesMessage_ProcessMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_processname(from.processname());
    }
    if (from._has_bit(1)) {
      set_pid(from.pid());
    }
    if (from._has_bit(2)) {
      set_usercpuload(from.usercpuload());
    }
    if (from._has_bit(3)) {
      set_systemcpuload(from.systemcpuload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessesMessage_ProcessMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessesMessage_ProcessMessage::CopyFrom(const ProcessesMessage_ProcessMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessesMessage_ProcessMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ProcessesMessage_ProcessMessage::Swap(ProcessesMessage_ProcessMessage* other) {
  if (other != this) {
    std::swap(processname_, other->processname_);
    std::swap(pid_, other->pid_);
    std::swap(usercpuload_, other->usercpuload_);
    std::swap(systemcpuload_, other->systemcpuload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessesMessage_ProcessMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessesMessage_ProcessMessage_descriptor_;
  metadata.reflection = ProcessesMessage_ProcessMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string ProcessesMessage::_default_hostname_;
#ifndef _MSC_VER
const int ProcessesMessage::kHostnameFieldNumber;
const int ProcessesMessage::kUpdatetimeFieldNumber;
const int ProcessesMessage::kProcessmessageFieldNumber;
#endif  // !_MSC_VER

ProcessesMessage::ProcessesMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessesMessage::InitAsDefaultInstance() {
}

ProcessesMessage::ProcessesMessage(const ProcessesMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessesMessage::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&_default_hostname_);
  updatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessesMessage::~ProcessesMessage() {
  SharedDtor();
}

void ProcessesMessage::SharedDtor() {
  if (hostname_ != &_default_hostname_) {
    delete hostname_;
  }
  if (this != default_instance_) {
  }
}

void ProcessesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessesMessage_descriptor_;
}

const ProcessesMessage& ProcessesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Protocol_2eproto();  return *default_instance_;
}

ProcessesMessage* ProcessesMessage::default_instance_ = NULL;

ProcessesMessage* ProcessesMessage::New() const {
  return new ProcessesMessage;
}

void ProcessesMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (hostname_ != &_default_hostname_) {
        hostname_->clear();
      }
    }
    updatetime_ = 0;
  }
  processmessage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_updatetime;
        break;
      }
      
      // required double updatetime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_updatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &updatetime_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processmessage;
        break;
      }
      
      // repeated .ProcessesMessage.ProcessMessage processmessage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processmessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processmessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_processmessage;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string hostname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hostname(), output);
  }
  
  // required double updatetime = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->updatetime(), output);
  }
  
  // repeated .ProcessesMessage.ProcessMessage processmessage = 3;
  for (int i = 0; i < this->processmessage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->processmessage(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string hostname = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hostname(), target);
  }
  
  // required double updatetime = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->updatetime(), target);
  }
  
  // repeated .ProcessesMessage.ProcessMessage processmessage = 3;
  for (int i = 0; i < this->processmessage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->processmessage(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessesMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string hostname = 1;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
    // required double updatetime = 2;
    if (has_updatetime()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .ProcessesMessage.ProcessMessage processmessage = 3;
  total_size += 1 * this->processmessage_size();
  for (int i = 0; i < this->processmessage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processmessage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessesMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessesMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessesMessage::MergeFrom(const ProcessesMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  processmessage_.MergeFrom(from.processmessage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_hostname(from.hostname());
    }
    if (from._has_bit(1)) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessesMessage::CopyFrom(const ProcessesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessesMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < processmessage_size(); i++) {
    if (!this->processmessage(i).IsInitialized()) return false;
  }
  return true;
}

void ProcessesMessage::Swap(ProcessesMessage* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(updatetime_, other->updatetime_);
    processmessage_.Swap(&other->processmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessesMessage_descriptor_;
  metadata.reflection = ProcessesMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
