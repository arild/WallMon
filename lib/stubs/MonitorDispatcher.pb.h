// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonitorDispatcher.proto

#ifndef PROTOBUF_MonitorDispatcher_2eproto__INCLUDED
#define PROTOBUF_MonitorDispatcher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Wallmon {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MonitorDispatcher_2eproto();
void protobuf_AssignDesc_MonitorDispatcher_2eproto();
void protobuf_ShutdownFile_MonitorDispatcher_2eproto();

class MonitorDispatcherMessage;

enum MonitorDispatcherMessage_Type {
  MonitorDispatcherMessage_Type_INIT = 0,
  MonitorDispatcherMessage_Type_STOP = 1,
  MonitorDispatcherMessage_Type_EVENT = 2
};
bool MonitorDispatcherMessage_Type_IsValid(int value);
const MonitorDispatcherMessage_Type MonitorDispatcherMessage_Type_Type_MIN = MonitorDispatcherMessage_Type_INIT;
const MonitorDispatcherMessage_Type MonitorDispatcherMessage_Type_Type_MAX = MonitorDispatcherMessage_Type_EVENT;
const int MonitorDispatcherMessage_Type_Type_ARRAYSIZE = MonitorDispatcherMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonitorDispatcherMessage_Type_descriptor();
inline const ::std::string& MonitorDispatcherMessage_Type_Name(MonitorDispatcherMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonitorDispatcherMessage_Type_descriptor(), value);
}
inline bool MonitorDispatcherMessage_Type_Parse(
    const ::std::string& name, MonitorDispatcherMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonitorDispatcherMessage_Type>(
    MonitorDispatcherMessage_Type_descriptor(), name, value);
}
// ===================================================================

class MonitorDispatcherMessage : public ::google::protobuf::Message {
 public:
  MonitorDispatcherMessage();
  virtual ~MonitorDispatcherMessage();
  
  MonitorDispatcherMessage(const MonitorDispatcherMessage& from);
  
  inline MonitorDispatcherMessage& operator=(const MonitorDispatcherMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonitorDispatcherMessage& default_instance();
  
  void Swap(MonitorDispatcherMessage* other);
  
  // implements Message ----------------------------------------------
  
  MonitorDispatcherMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonitorDispatcherMessage& from);
  void MergeFrom(const MonitorDispatcherMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MonitorDispatcherMessage_Type Type;
  static const Type INIT = MonitorDispatcherMessage_Type_INIT;
  static const Type STOP = MonitorDispatcherMessage_Type_STOP;
  static const Type EVENT = MonitorDispatcherMessage_Type_EVENT;
  static inline bool Type_IsValid(int value) {
    return MonitorDispatcherMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MonitorDispatcherMessage_Type_Type_MIN;
  static const Type Type_MAX =
    MonitorDispatcherMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MonitorDispatcherMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MonitorDispatcherMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MonitorDispatcherMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MonitorDispatcherMessage_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Wallmon.MonitorDispatcherMessage.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Wallmon::MonitorDispatcherMessage_Type type() const;
  inline void set_type(::Wallmon::MonitorDispatcherMessage_Type value);
  
  // optional string filePath = 4;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 4;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  
  // optional bytes eventData = 5;
  inline bool has_eventdata() const;
  inline void clear_eventdata();
  static const int kEventDataFieldNumber = 5;
  inline const ::std::string& eventdata() const;
  inline void set_eventdata(const ::std::string& value);
  inline void set_eventdata(const char* value);
  inline void set_eventdata(const void* value, size_t size);
  inline ::std::string* mutable_eventdata();
  
  // @@protoc_insertion_point(class_scope:Wallmon.MonitorDispatcherMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::std::string* filepath_;
  static const ::std::string _default_filepath_;
  ::std::string* eventdata_;
  static const ::std::string _default_eventdata_;
  friend void  protobuf_AddDesc_MonitorDispatcher_2eproto();
  friend void protobuf_AssignDesc_MonitorDispatcher_2eproto();
  friend void protobuf_ShutdownFile_MonitorDispatcher_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MonitorDispatcherMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// MonitorDispatcherMessage

// required .Wallmon.MonitorDispatcherMessage.Type type = 3;
inline bool MonitorDispatcherMessage::has_type() const {
  return _has_bit(0);
}
inline void MonitorDispatcherMessage::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::Wallmon::MonitorDispatcherMessage_Type MonitorDispatcherMessage::type() const {
  return static_cast< ::Wallmon::MonitorDispatcherMessage_Type >(type_);
}
inline void MonitorDispatcherMessage::set_type(::Wallmon::MonitorDispatcherMessage_Type value) {
  GOOGLE_DCHECK(::Wallmon::MonitorDispatcherMessage_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// optional string filePath = 4;
inline bool MonitorDispatcherMessage::has_filepath() const {
  return _has_bit(1);
}
inline void MonitorDispatcherMessage::clear_filepath() {
  if (filepath_ != &_default_filepath_) {
    filepath_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MonitorDispatcherMessage::filepath() const {
  return *filepath_;
}
inline void MonitorDispatcherMessage::set_filepath(const ::std::string& value) {
  _set_bit(1);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void MonitorDispatcherMessage::set_filepath(const char* value) {
  _set_bit(1);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void MonitorDispatcherMessage::set_filepath(const char* value, size_t size) {
  _set_bit(1);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonitorDispatcherMessage::mutable_filepath() {
  _set_bit(1);
  if (filepath_ == &_default_filepath_) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}

// optional bytes eventData = 5;
inline bool MonitorDispatcherMessage::has_eventdata() const {
  return _has_bit(2);
}
inline void MonitorDispatcherMessage::clear_eventdata() {
  if (eventdata_ != &_default_eventdata_) {
    eventdata_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MonitorDispatcherMessage::eventdata() const {
  return *eventdata_;
}
inline void MonitorDispatcherMessage::set_eventdata(const ::std::string& value) {
  _set_bit(2);
  if (eventdata_ == &_default_eventdata_) {
    eventdata_ = new ::std::string;
  }
  eventdata_->assign(value);
}
inline void MonitorDispatcherMessage::set_eventdata(const char* value) {
  _set_bit(2);
  if (eventdata_ == &_default_eventdata_) {
    eventdata_ = new ::std::string;
  }
  eventdata_->assign(value);
}
inline void MonitorDispatcherMessage::set_eventdata(const void* value, size_t size) {
  _set_bit(2);
  if (eventdata_ == &_default_eventdata_) {
    eventdata_ = new ::std::string;
  }
  eventdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonitorDispatcherMessage::mutable_eventdata() {
  _set_bit(2);
  if (eventdata_ == &_default_eventdata_) {
    eventdata_ = new ::std::string;
  }
  return eventdata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Wallmon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Wallmon::MonitorDispatcherMessage_Type>() {
  return ::Wallmon::MonitorDispatcherMessage_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MonitorDispatcher_2eproto__INCLUDED
