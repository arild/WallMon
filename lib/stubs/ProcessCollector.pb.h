// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProcessCollector.proto

#ifndef PROTOBUF_ProcessCollector_2eproto__INCLUDED
#define PROTOBUF_ProcessCollector_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProcessCollector_2eproto();
void protobuf_AssignDesc_ProcessCollector_2eproto();
void protobuf_ShutdownFile_ProcessCollector_2eproto();

class ProcessCollectorMessage;
class ProcessCollectorMessage_ProcessMessage;

// ===================================================================

class ProcessCollectorMessage_ProcessMessage : public ::google::protobuf::Message {
 public:
  ProcessCollectorMessage_ProcessMessage();
  virtual ~ProcessCollectorMessage_ProcessMessage();
  
  ProcessCollectorMessage_ProcessMessage(const ProcessCollectorMessage_ProcessMessage& from);
  
  inline ProcessCollectorMessage_ProcessMessage& operator=(const ProcessCollectorMessage_ProcessMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessCollectorMessage_ProcessMessage& default_instance();
  
  void Swap(ProcessCollectorMessage_ProcessMessage* other);
  
  // implements Message ----------------------------------------------
  
  ProcessCollectorMessage_ProcessMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessCollectorMessage_ProcessMessage& from);
  void MergeFrom(const ProcessCollectorMessage_ProcessMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string processname = 1;
  inline bool has_processname() const;
  inline void clear_processname();
  static const int kProcessnameFieldNumber = 1;
  inline const ::std::string& processname() const;
  inline void set_processname(const ::std::string& value);
  inline void set_processname(const char* value);
  inline void set_processname(const char* value, size_t size);
  inline ::std::string* mutable_processname();
  
  // optional uint32 pid = 2;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 2;
  inline ::google::protobuf::uint32 pid() const;
  inline void set_pid(::google::protobuf::uint32 value);
  
  // optional double userCpuLoad = 3;
  inline bool has_usercpuload() const;
  inline void clear_usercpuload();
  static const int kUserCpuLoadFieldNumber = 3;
  inline double usercpuload() const;
  inline void set_usercpuload(double value);
  
  // optional double systemCpuLoad = 4;
  inline bool has_systemcpuload() const;
  inline void clear_systemcpuload();
  static const int kSystemCpuLoadFieldNumber = 4;
  inline double systemcpuload() const;
  inline void set_systemcpuload(double value);
  
  // optional double systemCpuUtilization = 5;
  inline bool has_systemcpuutilization() const;
  inline void clear_systemcpuutilization();
  static const int kSystemCpuUtilizationFieldNumber = 5;
  inline double systemcpuutilization() const;
  inline void set_systemcpuutilization(double value);
  
  // optional double userCpuUtilization = 6;
  inline bool has_usercpuutilization() const;
  inline void clear_usercpuutilization();
  static const int kUserCpuUtilizationFieldNumber = 6;
  inline double usercpuutilization() const;
  inline void set_usercpuutilization(double value);
  
  // optional double memoryUtilization = 7;
  inline bool has_memoryutilization() const;
  inline void clear_memoryutilization();
  static const int kMemoryUtilizationFieldNumber = 7;
  inline double memoryutilization() const;
  inline void set_memoryutilization(double value);
  
  // optional uint32 networkInUtilization = 8;
  inline bool has_networkinutilization() const;
  inline void clear_networkinutilization();
  static const int kNetworkInUtilizationFieldNumber = 8;
  inline ::google::protobuf::uint32 networkinutilization() const;
  inline void set_networkinutilization(::google::protobuf::uint32 value);
  
  // optional uint32 networkOutUtilization = 9;
  inline bool has_networkoututilization() const;
  inline void clear_networkoututilization();
  static const int kNetworkOutUtilizationFieldNumber = 9;
  inline ::google::protobuf::uint32 networkoututilization() const;
  inline void set_networkoututilization(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ProcessCollectorMessage.ProcessMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* processname_;
  static const ::std::string _default_processname_;
  ::google::protobuf::uint32 pid_;
  double usercpuload_;
  double systemcpuload_;
  double systemcpuutilization_;
  double usercpuutilization_;
  double memoryutilization_;
  ::google::protobuf::uint32 networkinutilization_;
  ::google::protobuf::uint32 networkoututilization_;
  friend void  protobuf_AddDesc_ProcessCollector_2eproto();
  friend void protobuf_AssignDesc_ProcessCollector_2eproto();
  friend void protobuf_ShutdownFile_ProcessCollector_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProcessCollectorMessage_ProcessMessage* default_instance_;
};
// -------------------------------------------------------------------

class ProcessCollectorMessage : public ::google::protobuf::Message {
 public:
  ProcessCollectorMessage();
  virtual ~ProcessCollectorMessage();
  
  ProcessCollectorMessage(const ProcessCollectorMessage& from);
  
  inline ProcessCollectorMessage& operator=(const ProcessCollectorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessCollectorMessage& default_instance();
  
  void Swap(ProcessCollectorMessage* other);
  
  // implements Message ----------------------------------------------
  
  ProcessCollectorMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProcessCollectorMessage& from);
  void MergeFrom(const ProcessCollectorMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ProcessCollectorMessage_ProcessMessage ProcessMessage;
  
  // accessors -------------------------------------------------------
  
  // repeated .ProcessCollectorMessage.ProcessMessage processmessage = 1;
  inline int processmessage_size() const;
  inline void clear_processmessage();
  static const int kProcessmessageFieldNumber = 1;
  inline const ::ProcessCollectorMessage_ProcessMessage& processmessage(int index) const;
  inline ::ProcessCollectorMessage_ProcessMessage* mutable_processmessage(int index);
  inline ::ProcessCollectorMessage_ProcessMessage* add_processmessage();
  inline const ::google::protobuf::RepeatedPtrField< ::ProcessCollectorMessage_ProcessMessage >&
      processmessage() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProcessCollectorMessage_ProcessMessage >*
      mutable_processmessage();
  
  // @@protoc_insertion_point(class_scope:ProcessCollectorMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ProcessCollectorMessage_ProcessMessage > processmessage_;
  friend void  protobuf_AddDesc_ProcessCollector_2eproto();
  friend void protobuf_AssignDesc_ProcessCollector_2eproto();
  friend void protobuf_ShutdownFile_ProcessCollector_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProcessCollectorMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// ProcessCollectorMessage_ProcessMessage

// optional string processname = 1;
inline bool ProcessCollectorMessage_ProcessMessage::has_processname() const {
  return _has_bit(0);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_processname() {
  if (processname_ != &_default_processname_) {
    processname_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ProcessCollectorMessage_ProcessMessage::processname() const {
  return *processname_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_processname(const ::std::string& value) {
  _set_bit(0);
  if (processname_ == &_default_processname_) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void ProcessCollectorMessage_ProcessMessage::set_processname(const char* value) {
  _set_bit(0);
  if (processname_ == &_default_processname_) {
    processname_ = new ::std::string;
  }
  processname_->assign(value);
}
inline void ProcessCollectorMessage_ProcessMessage::set_processname(const char* value, size_t size) {
  _set_bit(0);
  if (processname_ == &_default_processname_) {
    processname_ = new ::std::string;
  }
  processname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessCollectorMessage_ProcessMessage::mutable_processname() {
  _set_bit(0);
  if (processname_ == &_default_processname_) {
    processname_ = new ::std::string;
  }
  return processname_;
}

// optional uint32 pid = 2;
inline bool ProcessCollectorMessage_ProcessMessage::has_pid() const {
  return _has_bit(1);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_pid() {
  pid_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ProcessCollectorMessage_ProcessMessage::pid() const {
  return pid_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_pid(::google::protobuf::uint32 value) {
  _set_bit(1);
  pid_ = value;
}

// optional double userCpuLoad = 3;
inline bool ProcessCollectorMessage_ProcessMessage::has_usercpuload() const {
  return _has_bit(2);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_usercpuload() {
  usercpuload_ = 0;
  _clear_bit(2);
}
inline double ProcessCollectorMessage_ProcessMessage::usercpuload() const {
  return usercpuload_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_usercpuload(double value) {
  _set_bit(2);
  usercpuload_ = value;
}

// optional double systemCpuLoad = 4;
inline bool ProcessCollectorMessage_ProcessMessage::has_systemcpuload() const {
  return _has_bit(3);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_systemcpuload() {
  systemcpuload_ = 0;
  _clear_bit(3);
}
inline double ProcessCollectorMessage_ProcessMessage::systemcpuload() const {
  return systemcpuload_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_systemcpuload(double value) {
  _set_bit(3);
  systemcpuload_ = value;
}

// optional double systemCpuUtilization = 5;
inline bool ProcessCollectorMessage_ProcessMessage::has_systemcpuutilization() const {
  return _has_bit(4);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_systemcpuutilization() {
  systemcpuutilization_ = 0;
  _clear_bit(4);
}
inline double ProcessCollectorMessage_ProcessMessage::systemcpuutilization() const {
  return systemcpuutilization_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_systemcpuutilization(double value) {
  _set_bit(4);
  systemcpuutilization_ = value;
}

// optional double userCpuUtilization = 6;
inline bool ProcessCollectorMessage_ProcessMessage::has_usercpuutilization() const {
  return _has_bit(5);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_usercpuutilization() {
  usercpuutilization_ = 0;
  _clear_bit(5);
}
inline double ProcessCollectorMessage_ProcessMessage::usercpuutilization() const {
  return usercpuutilization_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_usercpuutilization(double value) {
  _set_bit(5);
  usercpuutilization_ = value;
}

// optional double memoryUtilization = 7;
inline bool ProcessCollectorMessage_ProcessMessage::has_memoryutilization() const {
  return _has_bit(6);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_memoryutilization() {
  memoryutilization_ = 0;
  _clear_bit(6);
}
inline double ProcessCollectorMessage_ProcessMessage::memoryutilization() const {
  return memoryutilization_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_memoryutilization(double value) {
  _set_bit(6);
  memoryutilization_ = value;
}

// optional uint32 networkInUtilization = 8;
inline bool ProcessCollectorMessage_ProcessMessage::has_networkinutilization() const {
  return _has_bit(7);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_networkinutilization() {
  networkinutilization_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 ProcessCollectorMessage_ProcessMessage::networkinutilization() const {
  return networkinutilization_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_networkinutilization(::google::protobuf::uint32 value) {
  _set_bit(7);
  networkinutilization_ = value;
}

// optional uint32 networkOutUtilization = 9;
inline bool ProcessCollectorMessage_ProcessMessage::has_networkoututilization() const {
  return _has_bit(8);
}
inline void ProcessCollectorMessage_ProcessMessage::clear_networkoututilization() {
  networkoututilization_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 ProcessCollectorMessage_ProcessMessage::networkoututilization() const {
  return networkoututilization_;
}
inline void ProcessCollectorMessage_ProcessMessage::set_networkoututilization(::google::protobuf::uint32 value) {
  _set_bit(8);
  networkoututilization_ = value;
}

// -------------------------------------------------------------------

// ProcessCollectorMessage

// repeated .ProcessCollectorMessage.ProcessMessage processmessage = 1;
inline int ProcessCollectorMessage::processmessage_size() const {
  return processmessage_.size();
}
inline void ProcessCollectorMessage::clear_processmessage() {
  processmessage_.Clear();
}
inline const ::ProcessCollectorMessage_ProcessMessage& ProcessCollectorMessage::processmessage(int index) const {
  return processmessage_.Get(index);
}
inline ::ProcessCollectorMessage_ProcessMessage* ProcessCollectorMessage::mutable_processmessage(int index) {
  return processmessage_.Mutable(index);
}
inline ::ProcessCollectorMessage_ProcessMessage* ProcessCollectorMessage::add_processmessage() {
  return processmessage_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProcessCollectorMessage_ProcessMessage >&
ProcessCollectorMessage::processmessage() const {
  return processmessage_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProcessCollectorMessage_ProcessMessage >*
ProcessCollectorMessage::mutable_processmessage() {
  return &processmessage_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProcessCollector_2eproto__INCLUDED
